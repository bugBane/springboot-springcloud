1.实现一个Feign 客户端
a.新建一个 Spring Boot 的 Module 工程，取名为 eureka-feign-client。首先， 在工程 pom 文件中加入相关的依赖，包括继承了主 Maven 工程 pom 文件、
Feign 的起步依赖 spring-cloud-starter-feign、Eureka Client 的起步依赖 spring-cloud-starter-eureka、Web 功能的起步依赖 spring-boot-starter-web，
以及 Spring Boot 测试的起步依赖 spring boot-starter-test。
b.引入这些依赖之后，在工程的配置文件 application.yml 做相关的配置，包括配置程序名 eureka-feign-client，端口号为 8765 ，服务注册地址为 http://localhost:8761/eureka
c.通过以上3个步骤，该程序就具备了 Feign 的功能，现在来实现一个简单的 Feign Client。新建一个 EurekaClientFeign 接口，在接口上加@FeignClient 注解来声明一个 Feign Client,
其中 value 远程调用其他服务的服务名 FeignConfig.class 为 Feign Client 的配置类。在 EurekaClientFeign 接口内部有一个 sayHiFromClientEureka() 方法，
该方法通过 Feign 来调用 eureka-client 服务的“/hi” 的API 接口。
d.在 FeignConfig 类加上@Configuration 注解，表明该类是一个配置类，并注入 BeanName 为 feignRetryer 的 Retryer 的 Bean 。
注入该 Bean 之后， Feign 在远程调用失败后会进行重试。
在Service 层的 HiService 类注入 EurekaClientFeign 的 Bean ，通过 EurekaClientFeign 去调用 sayHiFromClientEureka() 方法。
e.在 HiController 上加上@RestController 注解，开启 RestController 的功能，写 API 接口“/hi”， 在该接口调用了 HiService 的 sayHi()方法。
HiService 通过 EurekaClientFeign 远程调用 eureka-client 服务的 API 接口 ＂/hi”。
f.启动 eureka-server 工程，端口号为 8761 ;启动两个 eureka-client 工程的实例，端口号分别为 8762 和 8763;启动 eureka-feign-client 工程，端口号为 8765
g.访问地址 http://localhost:8765/hi?name=eureka-feign-client
结果：ribbon负载均衡来回切换(feign方式)
      hi eureka-ribbon-client,port:8762
      hi eureka-ribbon-client,port:8763

2.FeignClient 详解
FeignClient 注解被@Target(ElementType TYPE）修饰，表示 FeignClient 注解的作用目标在接口上。
@Retention(RetentionPolicy.RUNTIME) 注解表明该注解会在 Class 字节码文件中存在，在运行时可以通过反射获取到。@Documented 表示该注解将被包含在 Javadoc 中。
@Feign Client 注解用于创建声明式 API 接口，该接口是RESTful 风格的 Feign 被设计成插拔式的，可以注入其他组件和 Feign 一起使用。
最典型的是如果 Ribbon 可用， Feign 会和 Ribbon 结合进行负载均衡。
在代码中 value() 和 name() 一样，是被调用的服务的 ServiceId。url() 直接填写硬编码的 Url 地址 decode404() 即 404 是被解码，还是抛异常。
configuration() 指明 FeignClient 配置类，默认的配置类为 FeignClientsConfiguration 在缺省的情况下,这个类注入了默认的 Decoder、Encoder 和 Contract 等配置的 Bean。
fall back() 为配置熔断器的处理类。

3.FeignClient 的配置
Feign Client 默认的配置类为 FeignClientsConfiguration 这个类在 spring-cloud-netflix-core 的 jar 包下。打开这个类，可以发现这个类注入了很多 Feign 相关的配置 Bean ，
包括 FeignRetryer、FeignLoggerFactory 和 FormattingConversionService 等。另外 Decoder、Encoder 和 Contract 这3个类在没有Bean 被注入的情况下，
会自动注入默认配置的 Bean ，即 ResponseEntityDecoder、SpringEncoder 和 SpringMvcContract。默认注入的配置如下。
    Decoder feignDecoder: ResponseEntityDecoder
    Encoder feignEncoder: SpringEncoder
    Logger feignLogger: Slf4jLogger
    Contract feignContract: SpringMvcContract
    Feign.Builder feignBuilder: HystrixFeign.Builder
FeignClientsConfiguration 的配置类部分代码如下， @ConditionalOnMissingBean 注解表示如果没有注入该类的 Bean 会默认注入一个 Bean。
重写 FeignClientsConfiguration 类中的 Bean 覆盖掉默认的配置 Bean ，从而达到自定义配置的目的。例如 Feign 默认的配置在请求失败后重试次数为 0，
即不重试（ Retryer.NEVER_RETRY ）。现在希望在请求失败后能够重试，这时需要写一个配置 FeignConfig 类，在该类中注入 Retryer 的 Bean 覆盖掉默认的 Retryer 的Bean，
并将 FeignConfig 定为 FeignClient 的配置类。

4.源码解析
Feign 是一个伪 Java Http 客户端 Feign 不做任何的请求处理。 Feign 通过处理注解生成 Request 模板，从而简化了 Http API 开发。开发人员可以使用注解的方式定制 Request API模板。
在发送 HttpRequest 请求之前 Feign 通过处理注解的方式替换掉 Request 模板中的参数，生成真正的 Request ，并交给 Java Http 客户端去处理。
利用这种方式，开发者只需要关注 Feign，注解模板的开发，而不用关注 Http 请求本身，简化了 Http 请求的过程，使得 Http 请求变得简单和容易理解。
Feign 通过包扫描注入 FeignClient 的 Bean ，该源码在 FeignClientsRegistrar 类中 。
a.首先在程序启动时，会检查是否有 @EnableFeignClients 注解，如果有该注解，则开启包扫描，扫描被@FeignClient 注解的接口。
b.当程序的启动类上有@EnableFeignClients 注解。在程序启动后,程序会通过包扫描将有@FeignClient 注解修饰的接口连同接口名和注解的信息一起取出 ，赋给 BeanDefinitionBuilder,
然后根据 BeanDefinitionBuilder 得到 BeanDefinition 最后将 BeanDefinition 注入 IoC 容器中。
c.注入 BeanDefinition 之后，通过 JDK 的代理，当调用 Feign Client 接口里面的方法时，该方法会被拦截，源码在 ReflectiveFeign 类,
在SynchronousMethodHandler 类进行拦截处理，会根据参数生 RequestTemplate 对象，该对象是 Http 请求的模板。
d.在上述代码中，有 executeAndDecode() 方法，该方法通过 RequestTemplate 生成 Request 请求对象，然后用 HttpClient 获取 Response ，即通过 Http Client 进行 Http 请求来获取响应。

5.在 Feign 中使用 HttpClient 和 OkHttp
Feign 中， Client 个非常重要的组件， Feign 最终发送 Request 请求以及接收 Response响应都是由 Client 组件完成的。 Client 在 Feign 源码中是一个接口，
在默认的情况下， Client 的实现类是 Client.Default, Client.Default 是由 HttpURLConnection 来实现网络请求的。另外，Client 还支持 HttpClient 和 OkhHttp 来进行网络请求。
首先查看 FeignRibbonClient 的自动配置类 FeignRibbonClientAutoConfiguration 该类在工程启动时注入 Bean，其中注入了 BeanName 为feign Client 的 Client 类型的 Bean。
在缺省配置 BeanName 为 FeignClient 的 Bean 情况下，会自动注入 Client.Default 这个对象，跟踪 Client.Default 源码， Client.Default 使用的网络请求框架为 HttpURLConnection。
那么，如何 Feign 中使用 HttpClient 的网络请求框架呢？下面继续查看 FeignRibbonClientAutoConfiguration 的源码：
从代码@ConditionalOnClass(ApacheHttpClient.class) 注解可知道，只需要在 pom 文件加上HttpClient 的 Classpath 即可。
另外需要在配置文件 application.yml 中配置 feign.httpclient.enabled 为true ，从 @ConditionalOnProperty 注解可知 ，这个配置可以不写 因为在默认的情况下就为true。
在工程 pom 文件加上 feign-httpclient 的依赖， Feign 就会采用 HtψClient 作为网络请求框架，而不是默认的 HttpURLConnection。
同理，如果想要 Feign 中使用 Okhttp 作为网络请求框架，则只需要在 porn 文件上加上 feign-okhttp 的依赖，

6.Feign如何实现负载均衡的？
FeignRibbonClientAutoConfiguration 类配置了 Client 类型（包括 URLConnection、OkHttp 和 HttpClient ），
最终向容器注入的是 Client 实现类 LoadBalancerFeignClient ，即载均衡客户端。

7.总的来说 Feign 的源码实现过程如下。
(1) 首先通过@EnableFeignClients 注解开启 FeignClient 的功能。只有这个注解存在，才会在程序启动时开启对@FeignClient注解的包扫描
(2）根据 Feign 实现接口，井在接口上面加上@FeignClient注解
(3）程序启动后，会进行包扫描，扫描所有的@Feignclient 注解 ，并将这些信息注入 IoC 容器中。
(4）当接口的方法被调用时 通过 JDK 的代理来生成具体的 requestTemplate 模板对象
(5）根据 RequestTemplate 再生成 Http 请求的 Request 对象
(6) Request 对象交给 Client 去处理 其中 Client 的网络请求框架可以是 HttpURLConnection、HttpClient和OkHttp
(7）最后 Client 被封装到 LoadBalanceClient类，这个类结合类 Ribbon 做到了负载均衡
